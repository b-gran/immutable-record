html
  head
    title immutable-record -- typed & immutable plain JS objects
    link(rel='stylesheet', href='style.css')
    link(rel='stylesheet', href='prism.css')
    link(href="https://fonts.googleapis.com/css?family=Bungee+Shade|Nunito+Sans", rel="stylesheet")
    link(href="https://fonts.googleapis.com/css?family=Amatic+SC", rel="stylesheet")

  body
    header
      h1.intro immutable-record &nbsp;&mdash; &nbsp; plain immutable Javascript objects with validation

      div.main

        p
          code.start immutable-record
          | is a small JavaScript library inspired by Facebook's ImmutableJS
          | that allows you to create immutable
          code.end Records
          |.
          code Records
          | behave very much like Objects (even
          code.end Object.keys()
          | ), but they are immutable and have automatic type validation.

        h3 What does it look like?

        div.splash-examples
          pre
            code.language-javascript.
              // ImmutableRecord() returns a Record class
              import ImmutableRecord from 'immutable-record'
              const Record = ImmutableRecord({
                foo: { default: 5 },
                optional: { type: 'number' }
                someField: {
                  type: value => 'foo' in value,
                  required: true
                },
              })

              // You just pass ordinary objects to the Record constructor
              const object = new Record({
                someField: { foo: 'bar' }
                // You don't have to provide optional fields
              })

          pre
            code.language-javascript.
              // Defaults will be used if no value is provided
              object.foo // 5

              // Object.keys() works as if the Record was a normal Object
              Object.keys(object) // [ 'foo', 'someField' ]

              // Records are immutable, so Record#set() returns a new Record
              const another = object.set('optional', 8)
              another.optional // 8

              // The original Record is unmodified
              'optional' in object // false

              // Validation happens automatically
              object.remove('someField')
              // Error: "someField" is missing from the record {"foo":5}

        h3
          | Why pick
          code.end immutable-record
          | ?

        p
          | Compared to ImmutableJS, the key feature is
          b automatic validation.
          | With
          code.end immutable-record
          | , you can specify a type of each field and it will be automatically checked.
          | Additionally:
          ul
            li
              code.start Object.keys()
              | works just how you would expect
            li
              | You can mark fields as
              code required
            li
              | You can create optional fields that may not be present on
              | a record, but will validate when set.

    section.docs
      .main.light
        h3 Installing

        pre
          code.language-bash.
            # immutable-record is available on npm
            npm install --save immutable-record

        section#importing
          h3 Importing

          pre
            code.language-javascript.
              import ImmutableRecord from 'immutable-record'

              // If you're not using ES6 modules
              const ImmutableRecord = require('immutable-record')

        section#records
          h3 Creating Records

          p.
            The ImmutableRecord() function takes an object whose values
            describe the validation that is applied to the fields.

          pre
            code.language-javascript.
              const Record = ImmutableRecord({
                optional: { type: 'string' },
                required: { required: true },
                validation: {
                  type: value => value > 5,
                  default: 6
              })

          p.
            You can also pass a second parameter to the ImmutableRecord() function
            which specifies a custom name for the Record class.

          pre
            code.language-javascript.
              const Foo = ImmutableRecord({
                  foo: { type: 'string' }
              }, 'Foo')
              Foo.name === 'Foo' // true
              console.log(Foo) // [Function: Foo]

          p
            | There are three validation options available for each field:
            code.end type
            | ,
            code.end required
            | , and
            code.end default
            | .

          h4
            | The
            code type
            | option

          p You have two choices for a field's type:
          ol
            li
              p.
                A primitive string (AKA one of the values returned
                by typeof). The possible values at the time of writing are:

              blockquote.
                'object', 'string', 'number', 'symbol', 'boolean',
                'function', 'undefined'
            li
              p.
                A validation function that takes a single argument (the field's
                value) and returns a boolean.

          pre
            code.language-javascript.
              const Record = ImmutableRecord({
                // Strings (typeof x === 'string') are valid
                string: { type: 'string' },

                // Arrays of length 4 or greater are valid
                array: {
                  type: value => (
                    Array.isArray(value) &&
                    value.length > 3
                  )
                }
              })

          h4
            | The
            code default
            | option

          p.
            If a field has a default and a Record is created without the field explicitly set,
            the default value is used automatically.

          pre
            code.language-javascript.
              const Record = ImmutableRecord({
                withDefault: { default: 5 }
              })

              // The default is automatically used if the field isn't set
              const object = new Record({})
              object.withDefault // 5

              // undefined is a legal field value, so the default won't be used
              const noDefault = new Record({
                withDefault: undefined
              })
              noDefault.withDefault // undefined

          h4
            | The
            code required
            | option

          p.
            Fields marked as "required" must be present on the Record for it to validate.

          pre
            code.language-javascript.
              const Record = ImmutableRecord({
                required: { required: true },
                optional: { required: false }
              })

              // No problems here
              const object = new Record({
                required: 1
              })
              'optional' in object // false

              // This doesn't work
              const bad = new Record({
                optional: 1
              })
              // Error: "required" is missing from the record {"optional":1}

          p.
            If a field is required and it also has a default, the Record will
            still validate even if the field isn't set.

          pre
            code.language-javascript.
              const Record = ImmutableRecord({
                field: {
                  required: true,
                  default: 5
                }
              })

              // No problems here
              const object = new Record({})
              object.field // 5

          h4 Fields with no options

          p You can also leave the options out to get optional, untyped fields.

          pre
            code.language-javascript.
              const Record = ImmutableRecord({
                optionalUntyped: {},

                // setting the field equal to null works too
                alsoWorks: null
              })

          h3 Using Records

          p Records mostly work just like normal Objects, except they're immutable.

          pre
            code.language-javascript.
              const ABCRecord = ImmutableRecord({
                a: {}, b: {}, c: {}
              })

              const object = new ABCRecord({ a: 1, c: 3 })
              object.a // 1
              object.c // 3
              object.b // undefined
              'b' in object // false

              // Object.keys() also works how you would expect
              Object.keys(object) // [ 'a', 'c' ]

          p When you try to set or delete a Record's value directly, the Record will throw.

          pre
            code.language-javascript.
              const object = new ABCRecord({ a: 1, c: 3 })

              object.b = 2
              // Error: Use the "set" function to update the values of an ImmutableRecord.

              delete object.a
              // TypeError: Cannot delete property 'a' of [object Object]

          h4 Record#set()

          p Use the set() function to update Record values. set() returns a new Record instance.

          pre
            code.language-javascript.
              const object = new ABCRecord({ a: 1, c: 3 })

              const withB = object.set('b', 2)
              withB instanceof ABCRecord // true
              withB.b // 2

              // The original record is unmodified
              object.b // undefined

          h4 Record#remove()

          p Use the remove() function to remove Record values. remove() returns a new Record instance.

          pre
            code.language-javascript.
              const object = new ABCRecord({ a: 1, b: 2, c: 3 })

              const withoutB = object.remove('b')
              withoutB instanceof ABCRecord // true
              withoutB.b // undefined

          h4 A point about validation

          p.
            Records are validated when they are constructed, so all of your fields will be validated
            when you use set() and remove().

    a(href="https://github.com/b-gran/immutable-record")
      img(
      style="position: absolute; top: 0; right: 0; border: 0;",
      src="https://camo.githubusercontent.com/52760788cde945287fbb584134c4cbc2bc36f904/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f77686974655f6666666666662e706e67",
      alt="Fork me on GitHub",
      data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_white_ffffff.png"
      )

    script(src='prism.js')
